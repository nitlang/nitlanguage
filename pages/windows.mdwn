# Nit on windows

The support on windows is more than experimental.
Fell free to report your attempts.

## Using msys2

msys2 and mingw-w64 package tools and services to compile native Windows applications using GCC and the GNU toolchain.

*This process is a work in progress, it may not work with the current nit source tree.*

1.  Download and install msys2 available at <https://msys2.github.io/>.

2.  Update the package list by following the instructions at <https://sourceforge.net/p/msys2/wiki/MSYS2%20installation/>.

3.  Install the minimum required package to download and compile nit:

    ~~~
    pacman -S make git ccache pkg-config libgc-devel mingw-w64-x86_64-gc mingw-w64-x86_64-libunwind mingw-w64-x86_64-pcre mingw-w64-x86_64-dlfcn
    ~~~

3.  Then, from the msys2 (or mingw64) command line, clone the Nit repo as usual:

    ~~~
    git clone https://github.com/nitlang/nit.git
    ~~~

    It will complain about the "very bad name" test file. This file cannot be represented on a Windows FS. Ignore this message, all other thousands of files should have unpacked successfully.

4.  A full `make` would fail on the socket module. Use instead the following command to build nitc only:

    ~~~
    make -C c_src && c_src/nitc.exe -o bin/nith src/nith.nit && bin/nith.exe -o bin/nitc src/nitc.nit
    ~~~

5.  Setup your environment with

    ~~~
    source misc/nit_env.sh
    ~~~

5.  When you finally have a `bin/nitc.exe`, compile and execute hello_world with:

    ~~~
    nitc examples/hello_world.nit
    ./hello_world.exe
    ~~~

5.  To distribute a program, copy the libgc and libwinpthread DLLs with the executable. More DLLs may be needed for programs using native libraries, but for `hello_world.exe` only the following libraries are needed:
    ~~~
    C:\msys64\mingw64\bin\libgc-1.dll
    C:\msys64\mingw64\bin\libwinpthread-1.dll
    C:\msys64\mingw64\bin\libpcreposix-0.dll
    ~~~

### Issues

*   If the compiled Nit program hangs, it may be an issue with libgc.
    A workaround is to set the env var `GC_MARKER` to 1, which prevents a deadlock between the many GC threads.

    `GC_MARKERS=1 bin/nitc examples/hello_world.nit`
    
    See: https://github.com/Alexpux/MINGW-packages/issues/1110

## Using Cygwin

1.  Download Cygwin from <https://cygwin.com/>
2.  Install it and select the following packages:

    ~~~
    gcc-core gcc-g++ git make ccache pkg-config libisl10 libcloog-isl libgc-devel
    ~~~

3.  Then, from the cygwin command line, clone the Nit repo as usual:

    ~~~
    git clone https://github.com/nitlang/nit.git
    ~~~

    It will complain about the "very bad name" test file. This file cannot be represented on a Windows FS. Ignore this message, all other thousands of files should have unpacked successfully.
    To clear the repository and have a nice working dir status (if you care), you should run:
   
    ~~~
    git chechout -f HEAD
    ~~~

5.  As proposed by the output of the make, setup your environment with

    ~~~
    source misc/nit_env.sh
    ~~~

5.  When you finally have a `bin/nitc.exe`, compile and execute hello_world with:

    ~~~
    nitc examples/hello_world.nit
    ./hello_world.exe
    ~~~

5.  To distribute a program outside of the cygwin environment, copy the cygwin and libgc DDLs with the executable. More DLLs may be needed for programs using native libraries, but for `hello_world.exe` and `nitc.exe` only the following libraries are needed:

    `/usr/bin/cyggc-1.dll /usr/bin/cygwin1.dll`

6.  More work is needed to actually develop Nit programs under a Windows environment. Simple programs like hello_world and Fibonacci work well outside of cygwin. However the compiler still expects UNIX-like paths and can't find nit_dir.

Additional notes:

* I didn't find libunwind for cygwin, but I didn't search much either.

### Cygwin FAQ/issues

*   The initial make does not work
   
    If you have something like:
   
    ~~~
    src/git-gen-version.sh: line 2: $'\r': command not found
    ~~~
   
    It is because you checked out the Nit repository with the config set to `core.autocrlf true`.
    Some `git` tools on Windows activate this flag by default.
    The `git` command from the Cygwin package does not that. 

*   Heap size errors

    If tools or compiled programs crash with heap size errors, you should enlarge the heap of the executable with `peflag` (that comes with Cygwin):
   
   ~~~
   peflags --cygwin-heap=4096 prog.exe
   ~~~

## Using Bash on Windows 10

### Requirements:

1.  You need to be running the Windows 10 Anniversary Update on your machine.

2.  The second requirement is to be running the 64-bit version of Windows 10. If you're running a 32-bit version of the operating system, you can use this guide to move to the 64-bit version.

### Bash Installation

1. Open **Settings**.

2. Click on **Update & security**.

3. Click on **For Developers**.

4. Under "Use developer features", select the **Developer mode** option to setup the environment to install Bash.

![alt text](../assets/images/developer-mode-windows10.jpg)

5. On the message box, click **Yes** to turn on developer mode.

![alt text](../assets/images/turnon-developer-mode-win10.jpg)

6. After the necessary components install, you'll need to restart your computer.

7. Once your computer reboots, open **Control Panel**.

8. Click on **Programs**.

9. Click on **Turn Windows features on or off**.

![alt text](../assets/images/programs-features-control-panel.jpg)

10. Check the **Windows Subsystem for Linux (beta)** option.

11. Click **OK**.

![alt text](../assets/images/windows-subsystem-linux.jpg)

12. Once the components installed on your computer, click the Restart now button to complete the task.

_After your computer restarts, you will notice that Bash will not appear in the "Recently added" list of apps, this is because Bash isn't actually installed yet. Now that you have setup the necessary components, use the following steps to complete the installation of Bash:_

1. Open Start, do a search for **bash.exe**, and press **Enter**.

2. On the command prompt, type **y** and press **Enter** to download and install Bash from the Windows Store.

![alt text](../assets/images/install-bash-ubuntu-windows10.jpg)

3. Then you'll need to create a default UNIX user account. This account doesn't have to be the same as your Windows account. Enter the username in the required field and press **Enter** (you can't use the username "admin").

4. Close the "bash.exe" command prompt.

_Now that you completed the installation and setup, you can open the Bash tool from the Start menu like you would with any other app._

_It's important to note that unlike the real Bash shell you'll find in Linux, the version of the command line utility has some limitations with Windows._

**Now bash on windows 10 is installed, you can now continue with the standard nit install.**
